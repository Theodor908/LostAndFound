@model LostAndFound.Models.BrowseDTO
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Browse Items";
}
@inject LostAndFound.Interfaces.ICategoryService categoryService
@inject LostAndFound.Interfaces.IPostService postService
@section Styles {
    <link rel="stylesheet" href="~/css/Browse.css" asp-append-version="true" />
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="mb-4">Browse Items</h1>
            <div class="bg-light rounded-4 shadow-sm p-4 mb-4 filter-section">
                <form asp-controller="Browse" asp-action="Index" method="get">
                    <div class="row">
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="statusFilter" class="form-label">Status</label>
                            <select class="form-select" id="statusFilter" name="status">
                                <option value="">All</option>
                                <option value="lost" selected="@(Model.FilterParams.Status == "lost")">Lost Items</option>
                                <option value="found" selected="@(Model.FilterParams.Status == "found")">Found Items</option>
                                <option value="claimed" selected="@(Model.FilterParams.Status == "claimed")">Claimed</option>
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="categoryFilter" class="form-label">Category</label>
                            <select class="form-select" id="categoryFilter" name="categoryName">
                                <option value="">All Categories</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Name" 
                                            selected="@(Model.FilterParams?.CategoryName == category.Name)">
                                        @category.Name (@category.ItemCount)
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="countryFilter" class="form-label">Country</label>
                            <select class="form-select" id="countryFilter" name="country">
                                <option value="">All Countries</option>
                                @foreach (var country in Model.Countries)
                                {
                                    <option value="@country" selected="@(Model.FilterParams?.Country == country)">@country</option>
                                }
                                
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="cityFilter" class="form-label">City</label>
                            <select class="form-select" id="cityFilter" name="city">
                                <option value="">All Cities</option>
                                @foreach (var city in Model.Cities)
                                {
                                    <option value="@city" selected="@(Model.FilterParams?.City?.Equals(city, StringComparison.OrdinalIgnoreCase) == true)">
                                        @city
                                    </option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="dateFilter" class="form-label">Date</label>
                            <select class="form-select" id="dateFilter" name="dateRange">
                                <option value="">Any Time</option>
                                <option value="today" selected="@(Model.FilterParams?.DateRange == "today")">Today</option>
                                <option value="week" selected="@(Model.FilterParams?.DateRange == "week")">This Week</option>
                                <option value="month" selected="@(Model.FilterParams?.DateRange == "month")">This Month</option>
                            </select>
                        </div>
                        <div class="col-md-6 col-lg-3 mb-3">
                            <label for="searchTerm" class="form-label">Search</label>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm" value="@Model.FilterParams?.SearchTerm" placeholder="Search items...">
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-12">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-filter me-1"></i> Apply Filters
                            </button>
                            <a asp-controller="Browse" asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-redo me-1"></i> Reset
                            </a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    
    <div class="row g-4">
        @if (Model.Items.Items.Any())
        {
            @foreach (var item in Model.Items.Items)
            {
                <div class="col-md-6 col-lg-4 col-xl-3">
                    <div class="card h-100 shadow-sm item-card">
                        @if(item.IsClaimed)
                        {
                            <div class="bg-success position-absolute top-0 end-0 m-2 claimed-badge">Claimed</div>
                        }
                        else if(item.IsFound)
                        {
                        <div class="badge bg-success position-absolute top-0 end-0 m-2 found">
                            Found
                        </div>
                        }
                        else
                        {
                            <div class="badge bg-danger position-absolute top-0 end-0 m-2 lost">Lost</div>
                        }
                        @if (item.PhotosDTO.Any())
                        {
                            <img src="@item.PhotosDTO.First().Url" class="card-img-top item-img" alt="@item.Name">
                        }
                        else
                        {
                            <div class="card-img-top item-img-placeholder">
                                <img src="~/img/Item_Placeholder.png" alt="@item.Name" class="card-img-top item-img" />
                            </div>
                        }
                        
                        <div class="card-body">
                            @if(item.Name.Length > 50)
                            {
                                <h5 class="card-title">@item.Name.Substring(0, Math.Min(item.Description.Length, 50)) ...</h5>
                            }
                            else
                            {
                                <h5 class="card-title">@item.Name</h5>
                            }
                            <p class="card-text text-muted mb-1">
                                <i class="fas fa-tag me-1"></i> @await categoryService.GetCategoryNameByIdAsync(item.CategoryId)
                            </p>
                            <p class="card-text text-muted mb-1">
                                <i class="fas fa-map-marker-alt me-1"></i> @item.City, @item.Country
                            </p>
                            <p class="card-text text-muted mb-1">
                                <i class="fas fa-hourglass-half"></i> 
                                @(item.PostedAt.ToString("MMM dd, yyyy"))
                            </p>
                            <p class="card-text text-muted mb-1">
                                <i class="@(item.FoundAt.HasValue ? "fas fa-calendar-check" : "far fa-calendar-alt me-1")"></i> 
                                @(item.FoundAt.HasValue ? item.FoundAt.Value.ToString("MMM dd, yyyy") : "Not specified")
                            </p>
                            @{
                                 var title = await postService.GetPostTitleByIdAsync(item.PostId);
                                 title = title?.Substring(0, Math.Min(title.Length, 50));
                            }
                            <p class="card-text text-muted mb-3">
                                <i class="fas fa-clipboard me-1"></i> Post: @title
                            </p>
                            <a asp-controller="Item" asp-action="ItemDetails" asp-route-id="@item.Id" class="btn btn-primary w-100">
                                View Item Details
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i> No items found matching your search criteria.
                </div>
            </div>
        }
    </div>
    
    @if (Model.Items.TotalPages > 1)
    {
        <div class="row mt-4">
            <div class="col-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        <li class="page-item @(!Model.Items.HasPrevious ? "disabled" : "")">
                            <a class="page-link" 
                               asp-controller="Browse" 
                               asp-action="Index" 
                               asp-route-status="@Model.FilterParams?.Status"
                               asp-route-category="@Model.FilterParams?.CategoryName"
                               asp-route-country="@Model.FilterParams?.Country"
                               asp-route-city="@Model.FilterParams?.City"
                               asp-route-dateRange="@Model.FilterParams?.DateRange"
                               asp-route-searchTerm="@Model.FilterParams?.SearchTerm"
                               asp-route-pageNumber="@(Model.Items.CurrentPage - 1)">
                                Previous
                            </a>
                        </li>
                        
                        @for (int i = 1; i <= Model.Items.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.Items.CurrentPage ? "active" : "")">
                                <a class="page-link"
                                   asp-controller="Browse"
                                   asp-action="Index"
                                   asp-route-status="@Model.FilterParams?.Status"
                                      asp-route-category="@Model.FilterParams?.CategoryName"
                                      asp-route-country="@Model.FilterParams?.Country"
                                      asp-route-city="@Model.FilterParams?.City"
                                        asp-route-dateRange="@Model.FilterParams?.DateRange"
                                        asp-route-searchTerm="@Model.FilterParams?.SearchTerm"
                                      asp-route-pageNumber="@i">
                                    @i
                                </a>
                            </li>
                        }
                        <li class="page-item @(!Model.Items.HasNext ? "disabled" : "")">
                            <a class="page-link" 
                               asp-controller="Browse" 
                               asp-action="Index" 
                               asp-route-status="@Model.FilterParams?.Status"
                               asp-route-category="@Model.FilterParams?.CategoryName"
                               asp-route-country="@Model.FilterParams?.Country"
                               asp-route-city="@Model.FilterParams?.City"
                               asp-route-dateRange="@Model.FilterParams?.DateRange"
                               asp-route-searchTerm="@Model.FilterParams?.SearchTerm"
                               asp-route-pageNumber="@(Model.Items.CurrentPage + 1)">
                                Next
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>
  <script>
$(document).ready(function () {
    var selectedCountry = $('#countryFilter').val();
    var selectedCity = $('#cityFilter').val();
    
    if (selectedCountry && $('#cityFilter option').length <= 1) {
        loadCitiesForCountry(selectedCountry, selectedCity);
    }
    
    $('#countryFilter').change(function () {
        var country = $(this).val();
        
        if (country) {
            loadCitiesForCountry(country);
        } else {
            $('#cityFilter').html('<option value="">All Cities</option>').prop('disabled', false);
        }
    });
    
    function loadCitiesForCountry(country, cityToSelect = null) {
        $('#cityFilter').prop('disabled', true).html('<option value="">Loading...</option>');
        
        $.ajax({
            url: '@Url.Action("GetCitiesByCountry", "Browse")',
            type: 'GET',
            data: { country: country },
            success: function (response) {
                if (response.success && response.cities && response.cities.length > 0) {
                    var citiesHtml = '<option value="">All Cities</option>';
                    
                    $.each(response.cities, function (index, city) {
                        var selected = (cityToSelect && cityToSelect.toLowerCase() === city.toLowerCase()) ? 'selected' : '';
                        citiesHtml += '<option value="' + city + '" ' + selected + '>' + city + '</option>';
                    });
                    
                    $('#cityFilter').html(citiesHtml).prop('disabled', false);
                } else {
                    $('#cityFilter').html('<option value="">No cities available</option>').prop('disabled', true);
                }
            },
            error: function () {
                $('#cityFilter').html('<option value="">Error loading cities</option>').prop('disabled', true);
            }
        });
    }
    
    function getCachedCities(country) {
        try {
            var cachedData = localStorage.getItem('cities_' + country.toLowerCase());
            if (cachedData) {
                var cacheItem = JSON.parse(cachedData);
                // Check if cache is still valid (24 hours)
                if ((new Date().getTime() - cacheItem.timestamp) < (24 * 60 * 60 * 1000)) {
                    return cacheItem.data;
                }
            }
        } catch (e) {
            console.error('Error reading from cache:', e);
        }
        return null;
    }
    
    function setCachedCities(country, cities) {
        try {
            localStorage.setItem('cities_' + country.toLowerCase(), JSON.stringify({
                data: cities,
                timestamp: new Date().getTime()
            }));
        } catch (e) {
            console.error('Error writing to cache:', e);
        }
    }
});
    </script>
