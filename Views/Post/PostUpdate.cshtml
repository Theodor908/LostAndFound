@model LostAndFound.Models.PostDTO
@{
    var maxDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
}

@inject LostAndFound.Interfaces.ICategoryService CategoryService

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Update Post";
    var categories = await CategoryService.GetAllCategoriesAsync();
}

<div class="container py-4">
    <div class="row g-4">
        <div class="col-12 col-lg-7 order-2 order-lg-1">
            <div class="p-4 bg-light rounded shadow-sm">
                <form asp-controller="Post" asp-action="PostUpdate" method="post" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <fieldset>
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <h1 class="h3 mb-0">Update Post</h1>
                            <a asp-controller="Post" asp-action="PostDelete" asp-route-id="@Model.Id" class="btn btn-danger">
                                <i class="bi bi-trash"></i> Delete Post
                            </a>
                            
                        </div>

                        <input type="hidden" asp-for="Id" />

                        <div class="mb-4">
                            <label class="form-label">Post Type</label>
                            <div class="d-flex gap-3">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="PostType" id="typeLost" value="Lost" checked="@(Model.PostType == "Lost" ? "checked" : null)">
                                    <label class="form-check-label" for="typeLost">
                                        Lost Items
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="PostType" id="typeFound" value="Found" checked="@(Model.PostType == "Found" ? "checked" : null)">
                                    <label class="form-check-label" for="typeFound">
                                        Found Items
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="form-check mb-3">
                            <input asp-for="IsActive" class="form-check-input" type="checkbox" id="isActive" />
                            <label class="form-check-label" for="isActive">Active</label>
                        </div>

                        <div class="form-floating mb-3">
                            <input asp-for="Title" class="form-control" placeholder="Enter title" required />
                            <label asp-for="Title"></label>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="form-floating mb-4">
                            <textarea asp-for="Description" class="form-control" placeholder="Post description" style="height: 100px;" required></textarea>
                            <label asp-for="Description"></label>
                            <span asp-validation-for="Description" class="text-danger"></span>
                        </div>

                        <div id="itemsContainer" class="overflow-scroll" style="max-height: 800px;">
                            @for (int i = 0; i < Model.Items.Count; i++)
                            {
                                <div class="card mb-4 shadow-sm item-card" data-index="@i">
                                    <div class="card-header bg-primary text-white item-header d-flex justify-content-between align-items-center">
                                        <span>Item @(@i + 1)</span>
                                        <button type="button" class="btn btn-sm btn-outline-light delete-item">
                                            <i class="bi bi-trash"></i> Remove
                                        </button>
                                    </div>
                                    <div class="card-body">
                                        <input type="hidden" asp-for="Items[@i].Id" />

                                        <div class="form-check mb-3">
                                            <input asp-for="Items[@i].IsClaimed" class="form-check-input" type="checkbox" id="isClaimed_@i" />
                                            <label class="form-check-label" for="isClaimed_@i">Claimed</label>
                                        </div>

                                        <div class="form-floating mb-3">
                                            <input asp-for="Items[@i].Name" class="form-control" placeholder="Item name" required />
                                            <label asp-for="Items[@i].Name"></label>
                                            <span asp-validation-for="Items[@i].Name" class="text-danger"></span>
                                        </div>

                                        <div class="form-floating mb-3">
                                            <select asp-for="Items[@i].CategoryId" class="form-select" required>
                                                <option value=""> Select Category </option>
                                                @foreach (var category in categories ?? Enumerable.Empty<CategoryDTO>())
                                                {
                                                    <option value="@category.Id" selected="@(Model.Items[i].CategoryId == category.Id)">@category.Name</option>
                                                }
                                            </select>
                                            <label asp-for="Items[@i].CategoryId"></label>
                                            <span asp-validation-for="Items[@i].CategoryId" class="text-danger"></span>
                                        </div>

                                        <div class="form-floating mb-3">
                                            <textarea asp-for="Items[@i].Description" class="form-control" style="height: 100px;" placeholder="Item description" required></textarea>
                                            <label asp-for="Items[@i].Description"></label>
                                            <span asp-validation-for="Items[@i].Description" class="text-danger"></span>
                                        </div>

                                        <input asp-for="Items[@i].Country" type="hidden" id="country_@i" />
                                        <input asp-for="Items[@i].City" type="hidden" id="city_@i" />
                                        <input asp-for="Items[@i].Location" type="hidden" id="location_@i" />
                                        <div class="mb-3">
                                            <span asp-validation-for="Items[@i].Country" class="text-danger"></span>
                                            <span asp-validation-for="Items[@i].City" class="text-danger"></span>
                                            <span asp-validation-for="Items[@i].Location" class="text-danger"></span>
                                        </div>

                                        <div id="display_location_@i" class="mb-3">
                                            @if (!string.IsNullOrEmpty(Model.Items[i].City) && !string.IsNullOrEmpty(Model.Items[i].Country))
                                            {
                                                <small class="text-success">@Model.Items[i].City, @Model.Items[i].Country (<a href="@Model.Items[i].Location" target="_blank">View Map</a>)</small>
                                            }
                                            else
                                            {
                                                <small class="text-muted">No location selected. <span class="text-danger">*Required</span></small>
                                            }
                                        </div>

                                        <button type="button" class="btn btn-secondary select-location mb-3" data-item-index="@i" data-bs-toggle="modal" data-bs-target="#locationModal">
                                            Pick Location
                                        </button>

                                        <div class="form-floating mb-3">
                                            <textarea asp-for="Items[@i].SpecificLocation" class="form-control" style="height: 100px;" placeholder="Item specific location" required></textarea>
                                            <label asp-for="Items[@i].SpecificLocation"></label>
                                            <span asp-validation-for="Items[@i].SpecificLocation" class="text-danger"></span>
                                        </div>

                                        <div class="form-floating mb-3 date-field lost-field @(Model.PostType != "Lost" ? "d-none" : "")">
                                            @if(Model.PostType == "Lost")
                                            {
                                                <input asp-for="Items[@i].LostAt" class="form-control" type="datetime-local" placeholder="Lost at" required max="@(DateTime.Now.ToString("yyyy-MM-ddTHH:mm"))" />
                                            }
                                            else
                                            {
                                                <input asp-for="Items[@i].LostAt" class="form-control" type="datetime-local" placeholder="Lost at" max="@(DateTime.Now.ToString("yyyy-MM-ddTHH:mm"))" />
                                            }
                                            <label asp-for="Items[@i].LostAt">When Lost</label>
                                            <span asp-validation-for="Items[@i].LostAt" class="text-danger"></span>
                                        </div>
                                        <div class="form-floating mb-3 date-field found-field @(Model.PostType != "Found" ? "d-none" : "")">
                                            @if(Model.PostType == "Found")
                                            {
                                                <input asp-for="Items[@i].FoundAt" class="form-control" type="datetime-local" placeholder="Found at" required max="@(DateTime.Now.ToString("yyyy-MM-ddTHH:mm"))" />
                                            }
                                            else
                                            {
                                                <input asp-for="Items[@i].FoundAt" class="form-control" type="datetime-local" placeholder="Found at" max="@(DateTime.Now.ToString("yyyy-MM-ddTHH:mm"))" />
                                            }
                                            <label asp-for="Items[@i].FoundAt">When Found</label>
                                            <span asp-validation-for="Items[@i].FoundAt" class="text-danger"></span>
                                        </div>

                                        @if (Model.Items[i].PhotosDTO != null && Model.Items[i].PhotosDTO.Any())
                                        {
                                            <div class="mb-4">
                                                <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-3">
                                                    @for(int j = 0; j < Model.Items[i].PhotosDTO.Count; j++)
                                                    {
                                                        var photo = Model.Items[i].PhotosDTO[j];
                                                        <div class="col existing-photo" data-photo-id="@photo.Id">
                                                            <div class="card h-100 shadow-sm">
                                                                <div class="position-relative">
                                                                    <img src="@photo.Url" alt="Item photo" class="img-thumbnail overflow-hidden" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            </div>
                                        }
                                        <div id="deletedPhotosContainer"></div>
                                        <div class="mb-3">
                                            <label class="form-label fw-bold">Upload Photos</label>
                                            <input type="file" name="Items[@i].Photos" class="form-control" multiple accept="image/*" />
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <button type="button" id="addItem" class="btn btn-outline-primary mb-4">+ Add Another Item</button>

                        <div class="d-flex justify-content-end gap-2">...
                        </div>
                    </fieldset>
                    <div class="d-flex justify-content-end gap-2">
                        <button type="submit" class="btn btn-primary">Update Post</button>
                        <a asp-controller="Post" asp-action="PostDetails" asp-route-id="@Model.Id" class="btn btn-secondary">Cancel</a>
                    </div>
                </form>
            </div>
        </div>

        <div class="col-12 col-lg-5 order-1 order-lg-2 d-flex align-items-center">
            <div class="bg-white p-4 shadow-sm rounded w-100">
                <h3 class="mb-3">Posting Guidelines</h3>
                <ul class="list-unstyled lh-lg">
                    <li>✅ Be specific about when and where the item was lost/found</li>
                    <li>📷 Include clear photos (up to 5 per item)</li>
                    <li>🔒 Avoid revealing uniquely identifying info</li>
                    <li>💡 For valuable items, keep a detail hidden for verification</li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="locationModalLabel">Select Location</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <input id="searchAddress" class="form-control" type="text" placeholder="Search for a location">
        </div>
        <div id="map" style="height: 400px; width: 100%;" class="border rounded"></div>
        <p class="text-muted mt-2"><small>Drag the marker to adjust location precisely</small></p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" id="saveLocation" class="btn btn-primary">Save Location</button>
      </div>
    </div>
  </div>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let itemIndex = @Model.Items.Count;
        let postType = '@Model.PostType';

        function getCurrentDateTime() {
            const now = new Date();
            return now.toISOString().slice(0, 16);
        }

        document.addEventListener('DOMContentLoaded', function () {

            document.querySelectorAll('input[type="datetime-local"]').forEach(input => {
                input.setAttribute('max', getCurrentDateTime());
            });

            document.getElementById('addItem').addEventListener('click', function () {
                const container = document.getElementById('itemsContainer');
                const loading = document.createElement('div');
                loading.className = 'text-center my-3 loading-indicator';
                loading.innerHTML = '<div class="spinner-border" role="status"></div>';
                container.appendChild(loading);

                fetch(`/Post/GetItemTemplate?index=${itemIndex}&postType=${postType}&postId=@Model.Id`)
                    .then(r => r.ok ? r.text() : Promise.reject())
                    .then(html => {
                        loading.remove();
                        container.insertAdjacentHTML('beforeend', html);
                        itemIndex++;
                        document.querySelectorAll('input[type="datetime-local"]')
                            .forEach(input => input.setAttribute('max', getCurrentDateTime()));
                        if ($.validator) $.validator.unobtrusive.parse(document.querySelector('form'));
                        toggleDeleteButtons();
                    })
                    .catch(() => {
                        loading.remove();
                        alert('Failed to add new item.');
                    });
            });


            document.getElementById('itemsContainer').addEventListener('click', function (e) {
                const deleteBtn = e.target.closest('.delete-item');
                if (deleteBtn) {
                    e.preventDefault();
                    console.log('Delete clicked:', deleteBtn);

                    const cards = document.querySelectorAll('.item-card');
                    if (cards.length <= 1) {
                        alert('Must have at least one item.');
                        return;
                    }

                    if (confirm('Remove this item?')) {
                        const card = deleteBtn.closest('.item-card');
                        const index = card.getAttribute('data-index');
                        const idField = card.querySelector('input[name$="].Id"]');

                        if (idField && idField.value && idField.value !== '0') {
                            console.log('Redirecting to shrink:', index);
                            window.location.href =
                                `/Post/PostDTOItemListShrink?id=${index}&postId=@Model.Id`;
                        } else {
                            card.remove();
                            reindexCards();
                        }
                    }
                }
            });

            function reindexCards() {
                const cards = document.querySelectorAll('.item-card');
                cards.forEach((c, i) => {
                    c.setAttribute('data-index', i);
                    const titleSpan = c.querySelector('.item-header span');
                    if (titleSpan) titleSpan.textContent = `Item ${i + 1}`;
                });
                itemIndex = cards.length;
                if ($.validator) $.validator.unobtrusive.parse(document.querySelector('form'));
                toggleDeleteButtons();
            }

            function toggleDeleteButtons() {
                const cards = document.querySelectorAll('.item-card');
                const buttons = document.querySelectorAll('.delete-item');
                const visible = cards.length > 1;
                buttons.forEach(btn => {
                    btn.style.display = visible ? 'inline-block' : 'none';
                });
            }

            toggleDeleteButtons();

            document.getElementById('typeLost').addEventListener('change', () => {
                postType = 'Lost';
                updateFormFields();
                updatePostTypeOnServer();
            });
            document.getElementById('typeFound').addEventListener('change', () => {
                postType = 'Found';
                updateFormFields();
                updatePostTypeOnServer();
            });

            function updateFormFields() {
                document.querySelectorAll('.item-card').forEach(c => {
                    const lostField = c.querySelector('.lost-field');
                    const foundField = c.querySelector('.found-field');
                    if (postType === 'Lost') {
                        lostField.classList.remove('d-none');
                        foundField.classList.add('d-none');
                        lostField.querySelector('input').required = true;
                        foundField.querySelector('input').required = false;
                    } else {
                        foundField.classList.remove('d-none');
                        lostField.classList.add('d-none');
                        foundField.querySelector('input').required = true;
                        lostField.querySelector('input').required = false;
                    }
                });
            }

            function updatePostTypeOnServer() {
                fetch('/Post/UpdatePostType', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken':
                            document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ postType, postId: @Model.Id })
                });
            }
        });

        let map, marker, geocoder, currentItemIndex = 0;

        function initMap() {
            geocoder = new google.maps.Geocoder();
            const defaultPosition = { lat: 40.7128, lng: -74.0060 };

            map = new google.maps.Map(document.getElementById('map'), {
                center: defaultPosition,
                zoom: 8,
                mapTypeControl: true,
                streetViewControl: false
            });

            marker = new google.maps.Marker({
                position: defaultPosition,
                map: map,
                draggable: true,
                animation: google.maps.Animation.DROP
            });

            const searchInput = document.getElementById('searchAddress');
            const searchBox = new google.maps.places.SearchBox(searchInput);

            map.addListener('bounds_changed', () => {
                searchBox.setBounds(map.getBounds());
            });

            searchBox.addListener('places_changed', () => {
                const places = searchBox.getPlaces();
                if (!places.length) return;

                const bounds = new google.maps.LatLngBounds();
                places.forEach(place => {
                    if (!place.geometry?.location) return;
                    marker.setPosition(place.geometry.location);
                    if (place.geometry.viewport) bounds.union(place.geometry.viewport);
                    else bounds.extend(place.geometry.location);
                });
                map.fitBounds(bounds);
                map.setZoom(15);
            });

 
            document.addEventListener('click', event => {
                const btn = event.target.closest('.select-location');
                if (btn) {
                    currentItemIndex = btn.getAttribute('data-item-index');
                    const loc = document.getElementById(`location_${currentItemIndex}`).value;
                    if (loc) {
                        try {
                            const params = new URLSearchParams(loc.split('?')[1]);
                            const q = params.get('q').split(',');
                            const position = { lat: +q[0], lng: +q[1] };
                            marker.setPosition(position);
                            map.setCenter(position);
                            map.setZoom(15);
                        } catch (_) { }
                    }
                }
            });

            document.getElementById('saveLocation').addEventListener('click', () => {
                const pos = marker.getPosition();
                const lat = pos.lat().toFixed(6), lng = pos.lng().toFixed(6);
                const locationUrl = `https://maps.google.com/?q=${lat},${lng}`;

                geocoder.geocode({ location: pos }, (results, status) => {
                    let city = '', country = '';
                    if (status === 'OK' && results[0]) {
                        results[0].address_components.forEach(cmp => {
                            if (cmp.types.includes('locality')) city = cmp.long_name;
                            if (cmp.types.includes('country')) country = cmp.long_name;
                        });
                    }
                    document.getElementById(`country_${currentItemIndex}`).value = country;
                    document.getElementById(`city_${currentItemIndex}`).value = city;
                    document.getElementById(`location_${currentItemIndex}`).value = locationUrl;
                    document.getElementById(`display_location_${currentItemIndex}`).innerHTML =
                        `<small class="text-success">${city}, ${country} (<a href="${locationUrl}" target="_blank">View Map</a>)</small>`;

                    bootstrap.Modal.getInstance(
                        document.getElementById('locationModal')
                    ).hide();

                    if ($.validator && $.validator.unobtrusive) {
                        $(`#country_${currentItemIndex}`).valid();
                        $(`#city_${currentItemIndex}`).valid();
                        $(`#location_${currentItemIndex}`).valid();
                    }
                });
            });
        }
    </script>

    <script async defer
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBDw8xyqq1nqw1FMGVcv7xOrELbkkjPzo&libraries=places&callback=initMap&language=en&region=US">
    </script>
}

