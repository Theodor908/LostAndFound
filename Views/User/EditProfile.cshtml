@model LostAndFound.Models.MemberDTO

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Edit Profile";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Profile.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="bg-light rounded-4 shadow-sm p-4 profile-section">
                <h1 class="h3 mb-4">Edit Profile</h1>
                
                <form method="post" enctype="multipart/form-data" asp-action="EditProfile">
                    <input type="hidden" asp-for="Id" />
                    
                    <div class="row mb-4">
                        <div class="col-md-3 text-center">
                            @{
                                if(Model.PhotoDTO != null)
                                {
                                    <img src="@Model.PhotoDTO.Url" alt="Profile Picture" class="profile-img mb-3">
                                }
                                else
                                {
                                    <img src="~/img/Portrait_Placeholder.png" alt="Profile Picture" class="profile-img mb-3">
                                }
                            }
                            
                            <div class="mb-3">
                                <label asp-for="Photo" class="form-label">Update Profile Picture</label>
                                <input type="file" class="form-control" id="photoUpload" asp-for="Photo" accept="image/*">
                                <span asp-validation-for="Photo" class="text-danger"></span>
                                <small class="text-muted d-block mt-1">Maximum file size: 1MB. Allowed formats: .jpg, .jpeg, .png, .gif</small>
                            </div>
                        </div>
                        
                        <div class="col-md-9">
                            <div class="mb-3">
                                <label asp-for="Username" class="form-label"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    <input type="text" class="form-control" id="username" asp-for="Username" required>
                                </div>
                                <span asp-validation-for="Username" class="text-danger"></span>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Email" class="form-label"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    <input type="email" class="form-control" id="email" asp-for="Email" required>
                                </div>
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label asp-for="Country" class="form-label"></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-globe"></i></span>
                                        <select asp-for="Country" id="countrySelect" class="form-select" required>
                                            <option value="">Select Country</option>
                                        </select>
                                    </div>
                                    <span asp-validation-for="Country" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="City" class="form-label"></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-city"></i></span>
                                        <select asp-for="City" id="citySelect" class="form-select" required disabled>
                                            <option value="">Select City</option>
                                        </select>
                                    </div>
                                    <span asp-validation-for="City" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-end gap-2">
                        <a asp-controller="User" asp-action="Profile" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const apiKey = 'YkV4T2h4dGVWWHY5Z1RWT2hCeUJGZlc4d2VIRFp4TnBpWk5JTTZGaA==';
        
        const countrySelect = document.getElementById('countrySelect');
        const citySelect = document.getElementById('citySelect');
        
        // Load countries on page load
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const countries = await fetchCountries();
                populateCountryDropdown(countries);
                
                const currentCountry = '@Model.Country';
                if (currentCountry) {
                    for (let i = 0; i < countrySelect.options.length; i++) {
                        if (countrySelect.options[i].textContent === currentCountry) {
                            countrySelect.selectedIndex = i;
                            const event = new Event('change');
                            countrySelect.dispatchEvent(event);
                            break;
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading countries:', error);
            }
        });

        var city_map = new Map();
        
        countrySelect.addEventListener('change', async () => {
            citySelect.innerHTML = '<option value="">Loading cities...</option>';
            citySelect.disabled = true;
            
            const selectedOption = countrySelect.options[countrySelect.selectedIndex];
            const countryIso2 = selectedOption.dataset.iso2; 
            
            if (countryIso2) {
                try {
                    let cities = city_map.get(countryIso2);

                    if (!cities) {
                        cities = await fetchCities(countryIso2);
                        city_map.set(countryIso2, cities); 
                    }

                    populateCityDropdown(cities);
                    citySelect.disabled = false;
                    
                    const currentCity = '@Model.City';
                    if (currentCity) {
 
                        for (let i = 0; i < citySelect.options.length; i++) {
                            if (citySelect.options[i].textContent === currentCity) {
                                citySelect.selectedIndex = i;
                                break;
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error loading cities:', error);
                    citySelect.innerHTML = '<option value="No City">No City</option>';
                    citySelect.disabled = false;
                }
            }
        });

        // API Functions
        async function fetchCountries() {
            const response = await fetch('https://api.countrystatecity.in/v1/countries', {
                method: 'GET',
                headers: {
                    'X-CSCAPI-KEY': apiKey
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
        }

        async function fetchCities(countryIso2) {
            const response = await fetch(`https://api.countrystatecity.in/v1/countries/${countryIso2}/cities`, {
                method: 'GET',
                headers: {
                    'X-CSCAPI-KEY': apiKey
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        }


        function populateCountryDropdown(countries) {
            countrySelect.innerHTML = '<option value="">Select Country</option>';
            
            countries.forEach(country => {
                const option = document.createElement('option');
                option.value = country.name; 
                option.textContent = country.name;
                option.dataset.iso2 = country.iso2; 
                countrySelect.appendChild(option);
            });
        }

        function populateCityDropdown(cities) {
            citySelect.innerHTML = '';
            
            if (cities.length === 0) {
                
                const option = document.createElement('option');
                option.value = "No City";
                option.textContent = "No City";
                citySelect.appendChild(option);
                citySelect.value = "No City";
            } else {
     
                const defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.textContent = "Select City";
                citySelect.appendChild(defaultOption);
                
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.name;
                    option.textContent = city.name;
                    citySelect.appendChild(option);
                });
            }
        }
    </script>
}