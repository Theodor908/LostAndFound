@model LostAndFound.Models.MemberDTO

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Edit Profile";
}

@section Styles {
    <link rel="stylesheet" href="~/css/Profile.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
}

<div class="container py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="bg-light rounded-4 shadow-sm p-4 profile-section">
                <h1 class="h3 mb-4">Edit Profile</h1>
                
                <form method="post" enctype="multipart/form-data" asp-action="EditProfile">
                    <input type="hidden" asp-for="Id" />
                    
                    <div class="row mb-4">
                        <div class="col-md-3 text-center">
                            @{
                                if(Model.PhotoDTO != null)
                                {
                                    <img src="@Model.PhotoDTO?.Url?.Replace("http://", "https://")" alt="Profile Picture" class="profile-img mb-3">
                                }
                                else
                                {
                                    <img src="~/img/Portrait_Placeholder.png" alt="Profile Picture" class="profile-img mb-3">
                                }
                            }
                            
                            <div class="mb-3">
                                <label asp-for="Photo" class="form-label">Update Profile Picture</label>
                                <input type="file" class="form-control" id="photoUpload" asp-for="Photo" accept="image/*">
                                <span asp-validation-for="Photo" class="text-danger"></span>
                                <small class="text-muted d-block mt-1">Maximum file size: 1MB. Allowed formats: .jpg, .jpeg, .png, .gif</small>
                            </div>
                        </div>
                        
                        <div class="col-md-9">
                            <div class="mb-3">
                                <label asp-for="Username" class="form-label"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    <input type="text" class="form-control" id="username" asp-for="Username" required>
                                </div>
                                <span asp-validation-for="Username" class="text-danger"></span>
                            </div>
                            
                            <div class="mb-3">
                                <label asp-for="Email" class="form-label"></label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                    <input type="email" class="form-control" id="email" asp-for="Email" required>
                                </div>
                                <span asp-validation-for="Email" class="text-danger"></span>
                            </div>
                            
                            <div class="row mb-3">
                                <div class="col-md-6">
                                    <label asp-for="Country" class="form-label"></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-globe"></i></span>
                                        <select asp-for="Country" id="countrySelect" class="form-select" required>
                                            <option value="">Select Country</option>
                                        </select>
                                    </div>
                                    <span asp-validation-for="Country" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="City" class="form-label"></label>
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-city"></i></span>
                                        <select asp-for="City" id="citySelect" class="form-select" required disabled>
                                            <option value="">Select City</option>
                                        </select>
                                    </div>
                                    <span asp-validation-for="City" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="d-flex justify-content-end gap-2">
                        <a asp-controller="User" asp-action="Profile" asp-route-id="@Model.Id" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save me-1"></i>Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Profile Image Preview
            const photoInput = document.getElementById('photoUpload');
            const profileImage = document.querySelector('.profile-img');
            
            if (photoInput && profileImage) {
                profileImage.style.transition = 'opacity 0.3s ease';
                
                photoInput.addEventListener('change', function() {
                    if (this.files && this.files[0]) {
                        const file = this.files[0];
                        const fileSize = file.size;
                        const maxSize = 1 * 1024 * 1024; 
                        const fileType = file.type;
                        const validTypes = ["image/jpeg", "image/jpg", "image/png", "image/gif"];

                        if (fileSize > maxSize) {
                            alert("File is too large. Maximum size is 1MB.");
                            this.value = "";
                            return;
                        }
                        
                        if (!validTypes.includes(fileType)) {
                            alert("Invalid file type. Only JPG, JPEG, PNG and GIF are allowed.");
                            this.value = ""; 
                            return;
                        }
                        
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            profileImage.style.opacity = '0';
                            
                            setTimeout(() => {
                                profileImage.src = e.target.result;
                                profileImage.style.opacity = '1';
                            }, 300);
                        };
                        
                        reader.readAsDataURL(file);
                    }
                });
            }
            
            // Country/City Selection
            const apiKey = 'YkV4T2h4dGVWWHY5Z1RWT2hCeUJGZlc4d2VIRFp4TnBpWk5JTTZGaA==';
            const countrySelect = document.getElementById('countrySelect');
            const citySelect = document.getElementById('citySelect');

            const currentCountry = '@Model.Country'.trim();
            const currentCity = '@Model.City'.trim();

            var city_map = new Map();

            async function initializeLocations() {
                try {
                    const countries = await fetchCountries();
                    populateCountryDropdown(countries);

                    if (currentCountry) {
                        // Find the matching country by name
                        const matchingCountry = countries.find(c => c.name === currentCountry);
                        if (matchingCountry) {
                            countrySelect.value = matchingCountry.name;
                            
                            // Load cities for the selected country
                            await loadCities(matchingCountry.iso2);

                            // Now set the city value
                            if (currentCity) {
                                citySelect.value = currentCity;
                            }
                        }
                    }
                } catch (error) {
                    console.error('Error initializing country/city:', error);
                }
            }

            // Initialize on page load
            initializeLocations();

            countrySelect.addEventListener('change', async () => {
                const selectedOption = countrySelect.selectedOptions[0];
                if (!selectedOption) return;
                
                const iso2 = selectedOption.dataset.iso2;
                if (iso2) {
                    await loadCities(iso2);
                }
            });

            async function loadCities(countryIso2) {
                citySelect.innerHTML = '<option value="">Loading cities...</option>';
                citySelect.disabled = true;

                try {
                    let cities = city_map.get(countryIso2);
                    if (!cities) {
                        cities = await fetchCities(countryIso2);
                        city_map.set(countryIso2, cities);
                    }
                    populateCityDropdown(cities);
                } catch (err) {
                    console.error('Error loading cities:', err);
                    citySelect.innerHTML = '<option value="">Failed to load cities</option>';
                } finally {
                    citySelect.disabled = false;
                }
            }

            async function fetchCountries() {
                const res = await fetch('https://api.countrystatecity.in/v1/countries', {
                    headers: { 'X-CSCAPI-KEY': apiKey }
                });
                if (!res.ok) throw new Error(`HTTP error ${res.status}`);
                return await res.json();
            }

            async function fetchCities(iso2) {
                const res = await fetch(`https://api.countrystatecity.in/v1/countries/${iso2}/cities`, {
                    headers: { 'X-CSCAPI-KEY': apiKey }
                });
                if (!res.ok) throw new Error(`HTTP error ${res.status}`);
                return await res.json();
            }

            function populateCountryDropdown(countries) {
                countrySelect.innerHTML = '<option value="">Select Country</option>';
                countries.forEach(c => {
                    const opt = document.createElement('option');
                    opt.value = c.name;
                    opt.textContent = c.name;
                    opt.dataset.iso2 = c.iso2;
                    countrySelect.appendChild(opt);
                });
            }

            function populateCityDropdown(cities) {
                citySelect.innerHTML = '<option value="">Select City</option>';
                
                if (!cities || cities.length === 0) {
                    citySelect.innerHTML = '<option value="">No cities available</option>';
                    return;
                }

                cities.forEach(c => {
                    const opt = document.createElement('option');
                    opt.value = c.name;
                    opt.textContent = c.name;
                    citySelect.appendChild(opt);
                });
            }
        });
    </script>
}