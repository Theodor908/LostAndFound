@model LostAndFound.Models.PostDTO
@inject LostAndFound.Interfaces.ICategoryService CategoryService

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Create Post";
    var categories = await CategoryService.GetAllCategoriesAsync();
}

<div class="container py-4">
  <div class="row g-4">
    <div class="col-12 col-lg-7 order-2 order-lg-1">
      <div class="p-4 bg-light rounded shadow-sm">
        <form asp-controller="Post" asp-action="CreatePost" method="post" enctype="multipart/form-data">
          <fieldset>
            <legend>Create New Post</legend>
            <!-- Post Type Selection -->
            <div class="mb-4">
              <label class="form-label">Post Type</label>
              <div class="d-flex gap-3">
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="PostType" id="typeLost" value="Lost" checked>
                  <label class="form-check-label" for="typeLost">Lost Items</label>
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="radio" name="PostType" id="typeFound" value="Found">
                  <label class="form-check-label" for="typeFound">Found Items</label>
                </div>
              </div>
            </div>

            <!-- Title and Description -->
            <div class="form-floating mb-3">
              <input asp-for="Title" class="form-control" placeholder="Enter title" required />
              <label asp-for="Title"></label>
              <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-floating mb-4">
              <textarea asp-for="Description" class="form-control" placeholder="Post description" style="height: 100px;" required></textarea>
              <label asp-for="Description"></label>
              <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <!-- Items Container -->
            <div id="itemsContainer" class="overflow-auto" style="max-height: 600px;">
             @for (int i = 0; i < Model.Items.Count; i++)
            {
            <div class="card mb-4 shadow-sm item-card" data-index="@i">
                <div class="card-header bg-primary text-white item-header d-flex justify-content-between align-items-center">
                <span>Item @(@i + 1)</span>
                @if (i > 0)
                {
                    <button type="button" class="btn btn-sm btn-outline-light delete-item">
                    <i class="bi bi-trash"></i> Remove
                    </button>
                }
                </div>
                <div class="card-body">

                <!-- Item Name -->
                <div class="form-floating mb-3">
                    <input asp-for="Items[@i].Name" class="form-control" placeholder="Item name" />
                    <label asp-for="Items[@i].Name"></label>
                    <span asp-validation-for="Items[@i].Name" class="text-danger"></span>
                </div>

                <!-- Category Dropdown -->
                <div class="form-floating mb-3">
                    <select asp-for="Items[@i].CategoryId" class="form-select">
                    <option value="">-- Select Category --</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                    </select>
                    <label asp-for="Items[@i].CategoryId"></label>
                    <span asp-validation-for="Items[@i].CategoryId" class="text-danger"></span>
                </div>

                <!-- Item Description -->
                <div class="form-floating mb-3">
                    <textarea asp-for="Items[@i].Description" class="form-control" style="height: 100px;" placeholder="Item description"></textarea>
                    <label asp-for="Items[@i].Description"></label>
                    <span asp-validation-for="Items[@i].Description" class="text-danger"></span>
                </div>

                <!-- Hidden Location Fields -->
                <input asp-for="Items[@i].Country" type="hidden" id="country_@i" />
                <input asp-for="Items[@i].City" type="hidden" id="city_@i" />
                <input asp-for="Items[@i].Location" type="hidden" id="location_@i" />
                <span asp-validation-for="Items[@i].Country" class="text-danger"></span>
                <span asp-validation-for="Items[@i].City" class="text-danger"></span>
                <span asp-validation-for="Items[@i].Location" class="text-danger"></span>

                <!-- Location Display -->
                <div id="display_location_@i" class="mb-3">
                    <small class="text-muted">No location selected.</small>
                </div>

                <!-- Pick Location Button -->
                <button type="button" class="btn btn-secondary select-location" data-item-index="@i" data-bs-toggle="modal" data-bs-target="#locationModal">
                    Pick Location
                </button>

                <!-- Found At -->
                <div class="form-floating mb-3 mt-3">
                    <input asp-for="Items[@i].FoundAt" type="datetime-local" class="form-control" max="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                    <label asp-for="Items[@i].FoundAt"></label>
                    <span asp-validation-for="Items[@i].FoundAt" class="text-danger"></span>
                </div>

                <!-- Photos -->
                <div class="mb-3">
                    <label class="form-label">Upload Photos</label>
                    <input type="file" name="Items[@i].Photos" class="form-control" multiple accept="image/*" />
                </div>
                </div>
            </div>
            }

            </div>

            <button type="button" id="addItem" class="btn btn-outline-primary mb-4">+ Add Another Item</button>

            <div class="d-flex justify-content-end gap-2">
              <a asp-controller="Browse" asp-action="Index" class="btn btn-secondary">Cancel</a>
              <button type="submit" class="btn btn-primary">Create Post</button>
            </div>
          </fieldset>
        </form>
      </div>
    </div>

    <div class="col-12 col-lg-5 order-1 order-lg-2 d-flex align-items-center">
      <div class="bg-white p-4 shadow-sm rounded w-100">
        <h3 class="mb-3">Posting Guidelines</h3>
        <ul class="list-unstyled lh-lg">
          <li>âœ… Be specific about when and where the item was lost/found</li>
          <li>ðŸ“· Include clear photos (up to 5 per item)</li>
          <li>ðŸ”’ Avoid revealing uniquely identifying info</li>
          <li>ðŸ’¡ For valuable items, keep a detail hidden for verification</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- Location Picker Modal (using Bootstrap modal) -->
<div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="locationModalLabel">Select Location</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div id="map" style="height:400px; width:100%;"></div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveLocation">Save Location</button>
      </div>
    </div>
  </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />
  <script>
    let itemIndex = @Model.Items.Count;
    let postType = 'Lost'; // Default post type

    // Variable to keep track of which item is updating its location
    let currentItemIndex = null;
    let map, marker, geocoder;

    // Initialize the Google Map and Geocoder
    function initMap() {
      const defaultLocation = { lat: 48.8566, lng: 2.3522 }; // Example: Paris
      map = new google.maps.Map(document.getElementById("map"), {
        center: defaultLocation,
        zoom: 5
      });
      marker = new google.maps.Marker({
        position: defaultLocation,
        map: map,
        draggable: true
      });
      geocoder = new google.maps.Geocoder();
    }

    // When any "Pick Location" button is clicked, record the item index
    document.querySelectorAll('.select-location').forEach(button => {
      button.addEventListener('click', function () {
        currentItemIndex = this.getAttribute('data-item-index');
        // Optionally, reposition marker to previous location if already set.
        const currentLocation = document.getElementById(`location_${currentItemIndex}`).value;
        if (currentLocation) {
          // Assume the location is stored as a Google Maps URL with query params, e.g., "?q=lat,lng"
          const urlParams = new URLSearchParams(currentLocation.split('?')[1]);
          const q = urlParams.get('q');
          if(q) {
            const [lat, lng] = q.split(',').map(Number);
            const position = { lat: lat, lng: lng };
            marker.setPosition(position);
            map.setCenter(position);
          }
        }
      });
    });

    // Reverse geocode the marker position to extract country and city
    function reverseGeocodePosition(position, callback) {
      geocoder.geocode({ 'location': position }, function(results, status) {
        if (status === 'OK' && results[0]) {
          // Parse address components to extract city and country
          let city = "", country = "";
          results[0].address_components.forEach(component => {
            if (component.types.includes('locality')) {
              city = component.long_name;
            }
            if (component.types.includes('country')) {
              country = component.long_name;
            }
          });
          callback({ city: city, country: country });
        } else {
          console.warn('Geocoder failed due to: ' + status);
          callback({ city: "", country: "" });
        }
      });
    }

    // When "Save Location" in the modal is clicked,
    // use reverse geocoding then update that specific item's hidden fields and display.
    document.getElementById('saveLocation').addEventListener('click', function () {
      const position = marker.getPosition();
      const lat = parseFloat(position.lat().toFixed(6));
      const lng = parseFloat(position.lng().toFixed(6));
      // Build the Google Maps URL; e.g., "https://maps.google.com/?q=lat,lng"
      const locationUrl = `https://maps.google.com/?q=${lat},${lng}`;

      reverseGeocodePosition(position, function(addr) {
        const country = addr.country || "Unknown Country";
        const city = addr.city || "Unknown City";

        // Update the hidden fields for the specific item
        document.getElementById(`country_${currentItemIndex}`).value = country;
        document.getElementById(`city_${currentItemIndex}`).value = city;
        document.getElementById(`location_${currentItemIndex}`).value = locationUrl;

        // Also update a display element on the item card to show the chosen location
        document.getElementById(`display_location_${currentItemIndex}`).innerHTML = 
          `<small class="text-success">${city}, ${country} (<a href="${locationUrl}" target="_blank">View Map</a>)</small>`;

        // Close the modal (using Bootstrap 5 modal API)
        const modalEl = document.getElementById('locationModal');
        const modal = bootstrap.Modal.getInstance(modalEl);
        modal.hide();
      });
    });

    // Additional functions (updateLabels, updateItemIndices, adding and deleting items) remain similar.
    function updateLabels() {
      // Update labels as needed...
    }
    function updateItemIndices() {
      // Update indices and names for dynamic items...
    }
    
    // Your existing code for adding items dynamically should also include setting the `max` attribute for date/time inputs.
    
  </script>
  <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDBDw8xyqq1nqw1FMGVcv7xOrELbkkjPzo&callback=initMap">
  </script>
}
